apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'dagger.hilt.android.plugin'
if (getGradle().getStartParameter().getTaskRequests().toString().contains("Hms")) {
    apply plugin: 'com.huawei.agconnect'
} else {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}
apply plugin: 'kotlin-android-extensions'


def versionTemplate = "{labelx}.{labely}.{labelz}"
def serverBuild = System.getenv('NEQABTY_BUILDNUMBER')
def secret = System.getenv('NEQABTY_SECRET')


def getLocalSigningConfig(String secret) {
    if (secret != null) {
        return android.signingConfigs.config
    } else {
        return null
    }
}

String getVersionName(String versionTemplate, int serverBuild) {
    println "lableeee"+(versionTemplate).replace("{labelx}", Integer.toString(serverBuild)[0]).replace("{labely}", Integer.toString(serverBuild)[1]).replace("{labelz}", Integer.toString(serverBuild)[2])
    return (versionTemplate).replace("{labelx}", Integer.toString(serverBuild)[0]).replace("{labely}", Integer.toString(serverBuild)[1]).replace("{labelz}", Integer.toString(serverBuild)[2])
}

int getVersionCode(String serverBuild) {
    if (serverBuild != null && !serverBuild.isEmpty()) {
        return (Integer.parseInt(serverBuild))
    }
    return 0
}

//allOpen {
//    // allows mocking for classes w/o directly opening them for release builds
//    annotation 'com.neqabty.testing.OpenClass'
//}
android {
    compileSdkVersion build_versions.target_sdk
    signingConfigs {
        config {
            keyAlias 'neqabty'
            keyPassword secret
            storeFile file('D:/Android/workspace/NeQabty/keyStore.jks')
            storePassword secret
        }
    }
    defaultConfig {
        applicationId "com.neqabty"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode getVersionCode(serverBuild)
        versionName getVersionName(versionTemplate, getVersionCode(serverBuild))
        testInstrumentationRunner "com.neqabty.presentation.util.GithubTestRunner"
        multiDexEnabled true
        signingConfig signingConfigs.config

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }

    }
    buildTypes {
        debug {
//            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            debuggable = true
//            signingConfig getLocalSigningConfig(secret)

//            minifyEnabled true
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getLocalSigningConfig(secret)

            debuggable = false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false
        }
    }
    flavorDimensions "mode", "services"

    productFlavors {
        tst {
            dimension "mode"
            minSdkVersion 21
            resConfigs "en", "hdpi"
            buildConfigField "String", "URL", '"http://3.131.229.146:44392"'
        }
        prod {
            dimension "mode"
            buildConfigField "String", "URL", '"front.neqabty.com"'
        }

        gms {
            dimension "services"
            buildConfigField "String", "SERVICE_USED", '"g"'
            versionNameSuffix "-gms"
        }
        hms {
            dimension "services"
            buildConfigField "String", "SERVICE_USED", '"h"'
            versionNameSuffix "-hms"
        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
        gms.java.srcDirs  = ['src/main/java','src/gms/java']
        hms.java.srcDirs  = ['src/main/java','src/hms/java']
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
//        abortOnError false
    }
//    kapt { generateStubs = true }
    kapt {
        generateStubs = true
//        correctErrorTypes = true
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 500)
        }
    }
    configurations {
        all*.exclude module: 'androidsvg' // This removes all other versions of `support-v4` if gets duplicated from all the artifacts.
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx
    implementation deps.room.common
    implementation deps.room.runtime
    implementation deps.rxjava2
    implementation deps.rx_android
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    implementation deps.retrofit.runtime
    implementation deps.retrofit.adapter
    implementation deps.retrofit.jadapter
    implementation deps.retrofit.gson
    implementation deps.retrofit.scalars
    implementation deps.okhttp_logging_interceptor
    implementation deps.glide.runtime

    implementation deps.constraint_layout
    implementation deps.kotlin.stdlib

    implementation deps.timber
    implementation deps.ccp
    gmsImplementation deps.firebase.core
    gmsImplementation deps.firebase.messaging
    gmsImplementation deps.firebase.jobdispatcher
    gmsImplementation platform(deps.firebase.bom)
    gmsImplementation deps.firebase.crashlytics
    gmsImplementation deps.firebase.analytics

    hmsImplementation deps.hms.hms_push

    implementation deps.viewpager.pager
    implementation deps.viewpager.indicator
    implementation deps.charts
    implementation deps.dimens.sdp
    implementation deps.dimens.ssp

    implementation deps.multidex
    kapt deps.room.compiler
    kapt deps.lifecycle.compiler
    kapt deps.binding.compiler

    implementation deps.hilt.runtime
    kapt deps.hilt.compiler

    // Activity KTX for viewModels()
    implementation deps.activity_ktx
    implementation deps.fragment_ktx

    implementation deps.androidsvg
    implementation deps.paytabs

    implementation deps.mastercard
    implementation(name: 'cowpaysdk', ext: 'aar')
    implementation project(':wheel')
    implementation project(':mobilepaymentsdktest')
    implementation project(path: ':pdfcreator')
    implementation project(':yodawy')
    testImplementation deps.junit
    testImplementation deps.mock_web_server
    testImplementation(deps.arch_core.testing, {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    testImplementation deps.mockito.core

    androidTestImplementation deps.navigation.testing_ktx
    androidTestImplementation deps.support.app_compat
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.cardview
    androidTestImplementation deps.support.design

    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    androidTestImplementation(deps.arch_core.testing, {
    })
    androidTestImplementation deps.dexmaker
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }


}

task printBuildNumber {
    println System.getenv("NEQABTY_BUILDNUMBER")
}